# DO NOT EDIT THIS FILE MANUALLY
# This module is automatically generated by running mix task generate_file
# every change must be done inside the mix task directly

defmodule KlifeProtocol.Messages.ReadShareGroupState do
  @moduledoc """
  Kafka protocol ReadShareGroupState message

  Request versions summary:

  Response versions summary:

  """

  alias KlifeProtocol.Deserializer
  alias KlifeProtocol.Serializer
  alias KlifeProtocol.Header

  @api_key 84
  @min_flexible_version_req 0
  @min_flexible_version_res 0

  @doc """
  Receives a map and serialize it to kafka wire format of the given version.

  Input content fields:
  - group_id: The group identifier. (string | versions 0+)
  - topics: The data for the topics. ([]ReadStateData | versions 0+)
      - topic_id: The topic identifier. (uuid | versions 0+)
      - partitions: The data for the partitions. ([]PartitionData | versions 0+)
          - partition: The partition index. (int32 | versions 0+)
          - leader_epoch: The leader epoch of the share-partition. (int32 | versions 0+)

  """
  def serialize_request(%{headers: headers, content: content}, version) do
    headers
    |> Map.put(:request_api_key, @api_key)
    |> Map.put(:request_api_version, version)
    |> Header.serialize_request(req_header_version(version))
    |> then(&Serializer.execute(content, request_schema(version), &1))
  end

  @doc """
  Receive a binary in the kafka wire format and deserialize it into a map.

  Response content fields:

  - results: The read results ([]ReadStateResult | versions 0+)
      - topic_id: The topic identifier (uuid | versions 0+)
      - partitions: The results for the partitions. ([]PartitionResult | versions 0+)
          - partition: The partition index. (int32 | versions 0+)
          - error_code: The error code, or 0 if there was no error. (int16 | versions 0+)
          - error_message: The error message, or null if there was no error. (string | versions 0+)
          - state_epoch: The state epoch for this share-partition. (int32 | versions 0+)
          - start_offset: The share-partition start offset, which can be -1 if it is not yet initialized. (int64 | versions 0+)
          - state_batches:  ([]StateBatch | versions 0+)
              - first_offset: The base offset of this state batch. (int64 | versions 0+)
              - last_offset: The last offset of this state batch. (int64 | versions 0+)
              - delivery_state: The state - 0:Available,2:Acked,4:Archived. (int8 | versions 0+)
              - delivery_count: The delivery count. (int16 | versions 0+)

  """
  def deserialize_response(data, version, with_header? \\ true)

  def deserialize_response(data, version, true) do
    {:ok, {headers, rest_data}} = Header.deserialize_response(data, res_header_version(version))

    case Deserializer.execute(rest_data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{headers: headers, content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  def deserialize_response(data, version, false) do
    case Deserializer.execute(data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  @doc """
  Returns the message api key number.
  """
  def api_key(), do: @api_key

  @doc """
  Returns the current max supported version of this message.
  """
  def max_supported_version(), do: 0

  @doc """
  Returns the current min supported version of this message.
  """
  def min_supported_version(), do: 0

  defp req_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_req, do: 2, else: 1)

  defp res_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_res, do: 1, else: 0)

  def request_schema(0),
    do: [
      group_id: {:compact_string, %{is_nullable?: false}},
      topics:
        {{:compact_array,
          [
            topic_id: {:uuid, %{is_nullable?: false}},
            partitions:
              {{:compact_array,
                [
                  partition: {:int32, %{is_nullable?: false}},
                  leader_epoch: {:int32, %{is_nullable?: false}},
                  tag_buffer: {:tag_buffer, []}
                ]}, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, []}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, []}
    ]

  def request_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message ReadShareGroupState")

  def response_schema(0),
    do: [
      results:
        {{:compact_array,
          [
            topic_id: {:uuid, %{is_nullable?: false}},
            partitions:
              {{:compact_array,
                [
                  partition: {:int32, %{is_nullable?: false}},
                  error_code: {:int16, %{is_nullable?: false}},
                  error_message: {:compact_string, %{is_nullable?: true}},
                  state_epoch: {:int32, %{is_nullable?: false}},
                  start_offset: {:int64, %{is_nullable?: false}},
                  state_batches:
                    {{:compact_array,
                      [
                        first_offset: {:int64, %{is_nullable?: false}},
                        last_offset: {:int64, %{is_nullable?: false}},
                        delivery_state: {:int8, %{is_nullable?: false}},
                        delivery_count: {:int16, %{is_nullable?: false}},
                        tag_buffer: {:tag_buffer, %{}}
                      ]}, %{is_nullable?: false}},
                  tag_buffer: {:tag_buffer, %{}}
                ]}, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, %{}}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, %{}}
    ]

  def response_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message ReadShareGroupState")
end
