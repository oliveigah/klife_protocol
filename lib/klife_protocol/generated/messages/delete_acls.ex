# DO NOT EDIT THIS FILE MANUALLY
# This module is automatically generated by running mix task generate_file
# every change must be done inside the mix task directly

defmodule KlifeProtocol.Messages.DeleteAcls do
  @moduledoc """
  Kafka protocol DeleteAcls message

  Request versions summary:
  - Version 0 was removed in Apache Kafka 4.0, Version 1 is the new baseline.
  Version 1 adds the pattern type.
  Version 2 enables flexible versions.
  Version 3 adds the user resource type.

  Response versions summary:
  - Version 0 was removed in Apache Kafka 4.0, Version 1 is the new baseline.
  Version 1 adds the resource pattern type.
  Starting in version 1, on quota violation, brokers send out responses before throttling.
  Version 2 enables flexible versions.
  Version 3 adds the user resource type.

  """

  alias KlifeProtocol.Deserializer
  alias KlifeProtocol.Serializer
  alias KlifeProtocol.Header

  @api_key 31
  @min_flexible_version_req 2
  @min_flexible_version_res 2

  @doc """
  Receives a map and serialize it to kafka wire format of the given version.

  Input content fields:
  - filters: The filters to use when deleting ACLs. ([]DeleteAclsFilter | versions 0+)
      - resource_type_filter: The resource type. (int8 | versions 0+)
      - resource_name_filter: The resource name. (string | versions 0+)
      - pattern_type_filter: The pattern type. (int8 | versions 1+)
      - principal_filter: The principal filter, or null to accept all principals. (string | versions 0+)
      - host_filter: The host filter, or null to accept all hosts. (string | versions 0+)
      - operation: The ACL operation. (int8 | versions 0+)
      - permission_type: The permission type. (int8 | versions 0+)

  """
  def serialize_request(%{headers: headers, content: content}, version) do
    headers
    |> Map.put(:request_api_key, @api_key)
    |> Map.put(:request_api_version, version)
    |> Header.serialize_request(req_header_version(version))
    |> then(&Serializer.execute(content, request_schema(version), &1))
  end

  @doc """
  Receive a binary in the kafka wire format and deserialize it into a map.

  Response content fields:

  - throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. (int32 | versions 0+)
  - filter_results: The results for each filter. ([]DeleteAclsFilterResult | versions 0+)
      - error_code: The error code, or 0 if the filter succeeded. (int16 | versions 0+)
      - error_message: The error message, or null if the filter succeeded. (string | versions 0+)
      - matching_acls: The ACLs which matched this filter. ([]DeleteAclsMatchingAcl | versions 0+)
          - error_code: The deletion error code, or 0 if the deletion succeeded. (int16 | versions 0+)
          - error_message: The deletion error message, or null if the deletion succeeded. (string | versions 0+)
          - resource_type: The ACL resource type. (int8 | versions 0+)
          - resource_name: The ACL resource name. (string | versions 0+)
          - pattern_type: The ACL resource pattern type. (int8 | versions 1+)
          - principal: The ACL principal. (string | versions 0+)
          - host: The ACL host. (string | versions 0+)
          - operation: The ACL operation. (int8 | versions 0+)
          - permission_type: The ACL permission type. (int8 | versions 0+)

  """
  def deserialize_response(data, version, with_header? \\ true)

  def deserialize_response(data, version, true) do
    {:ok, {headers, rest_data}} = Header.deserialize_response(data, res_header_version(version))

    case Deserializer.execute(rest_data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{headers: headers, content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  def deserialize_response(data, version, false) do
    case Deserializer.execute(data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  @doc """
  Returns the message api key number.
  """
  def api_key(), do: @api_key

  @doc """
  Returns the current max supported version of this message.
  """
  def max_supported_version(), do: 3

  @doc """
  Returns the current min supported version of this message.
  """
  def min_supported_version(), do: 0

  defp req_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_req, do: 2, else: 1)

  defp res_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_res, do: 1, else: 0)

  def request_schema(0),
    do: [
      filters:
        {{:array,
          [
            resource_type_filter: {:int8, %{is_nullable?: false}},
            resource_name_filter: {:string, %{is_nullable?: true}},
            principal_filter: {:string, %{is_nullable?: true}},
            host_filter: {:string, %{is_nullable?: true}},
            operation: {:int8, %{is_nullable?: false}},
            permission_type: {:int8, %{is_nullable?: false}}
          ]}, %{is_nullable?: false}}
    ]

  def request_schema(1),
    do: [
      filters:
        {{:array,
          [
            resource_type_filter: {:int8, %{is_nullable?: false}},
            resource_name_filter: {:string, %{is_nullable?: true}},
            pattern_type_filter: {:int8, %{is_nullable?: false}},
            principal_filter: {:string, %{is_nullable?: true}},
            host_filter: {:string, %{is_nullable?: true}},
            operation: {:int8, %{is_nullable?: false}},
            permission_type: {:int8, %{is_nullable?: false}}
          ]}, %{is_nullable?: false}}
    ]

  def request_schema(2),
    do: [
      filters:
        {{:compact_array,
          [
            resource_type_filter: {:int8, %{is_nullable?: false}},
            resource_name_filter: {:compact_string, %{is_nullable?: true}},
            pattern_type_filter: {:int8, %{is_nullable?: false}},
            principal_filter: {:compact_string, %{is_nullable?: true}},
            host_filter: {:compact_string, %{is_nullable?: true}},
            operation: {:int8, %{is_nullable?: false}},
            permission_type: {:int8, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, []}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, []}
    ]

  def request_schema(3),
    do: [
      filters:
        {{:compact_array,
          [
            resource_type_filter: {:int8, %{is_nullable?: false}},
            resource_name_filter: {:compact_string, %{is_nullable?: true}},
            pattern_type_filter: {:int8, %{is_nullable?: false}},
            principal_filter: {:compact_string, %{is_nullable?: true}},
            host_filter: {:compact_string, %{is_nullable?: true}},
            operation: {:int8, %{is_nullable?: false}},
            permission_type: {:int8, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, []}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, []}
    ]

  def request_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message DeleteAcls")

  def response_schema(0),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      filter_results:
        {{:array,
          [
            error_code: {:int16, %{is_nullable?: false}},
            error_message: {:string, %{is_nullable?: true}},
            matching_acls:
              {{:array,
                [
                  error_code: {:int16, %{is_nullable?: false}},
                  error_message: {:string, %{is_nullable?: true}},
                  resource_type: {:int8, %{is_nullable?: false}},
                  resource_name: {:string, %{is_nullable?: false}},
                  principal: {:string, %{is_nullable?: false}},
                  host: {:string, %{is_nullable?: false}},
                  operation: {:int8, %{is_nullable?: false}},
                  permission_type: {:int8, %{is_nullable?: false}}
                ]}, %{is_nullable?: false}}
          ]}, %{is_nullable?: false}}
    ]

  def response_schema(1),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      filter_results:
        {{:array,
          [
            error_code: {:int16, %{is_nullable?: false}},
            error_message: {:string, %{is_nullable?: true}},
            matching_acls:
              {{:array,
                [
                  error_code: {:int16, %{is_nullable?: false}},
                  error_message: {:string, %{is_nullable?: true}},
                  resource_type: {:int8, %{is_nullable?: false}},
                  resource_name: {:string, %{is_nullable?: false}},
                  pattern_type: {:int8, %{is_nullable?: false}},
                  principal: {:string, %{is_nullable?: false}},
                  host: {:string, %{is_nullable?: false}},
                  operation: {:int8, %{is_nullable?: false}},
                  permission_type: {:int8, %{is_nullable?: false}}
                ]}, %{is_nullable?: false}}
          ]}, %{is_nullable?: false}}
    ]

  def response_schema(2),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      filter_results:
        {{:compact_array,
          [
            error_code: {:int16, %{is_nullable?: false}},
            error_message: {:compact_string, %{is_nullable?: true}},
            matching_acls:
              {{:compact_array,
                [
                  error_code: {:int16, %{is_nullable?: false}},
                  error_message: {:compact_string, %{is_nullable?: true}},
                  resource_type: {:int8, %{is_nullable?: false}},
                  resource_name: {:compact_string, %{is_nullable?: false}},
                  pattern_type: {:int8, %{is_nullable?: false}},
                  principal: {:compact_string, %{is_nullable?: false}},
                  host: {:compact_string, %{is_nullable?: false}},
                  operation: {:int8, %{is_nullable?: false}},
                  permission_type: {:int8, %{is_nullable?: false}},
                  tag_buffer: {:tag_buffer, %{}}
                ]}, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, %{}}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, %{}}
    ]

  def response_schema(3),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      filter_results:
        {{:compact_array,
          [
            error_code: {:int16, %{is_nullable?: false}},
            error_message: {:compact_string, %{is_nullable?: true}},
            matching_acls:
              {{:compact_array,
                [
                  error_code: {:int16, %{is_nullable?: false}},
                  error_message: {:compact_string, %{is_nullable?: true}},
                  resource_type: {:int8, %{is_nullable?: false}},
                  resource_name: {:compact_string, %{is_nullable?: false}},
                  pattern_type: {:int8, %{is_nullable?: false}},
                  principal: {:compact_string, %{is_nullable?: false}},
                  host: {:compact_string, %{is_nullable?: false}},
                  operation: {:int8, %{is_nullable?: false}},
                  permission_type: {:int8, %{is_nullable?: false}},
                  tag_buffer: {:tag_buffer, %{}}
                ]}, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, %{}}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, %{}}
    ]

  def response_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message DeleteAcls")
end
