# DO NOT EDIT THIS FILE MANUALLY
# This module is automatically generated by running mix task generate_file
# every change must be done inside the mix task directly

defmodule KlifeProtocol.Messages.UpdateRaftVoter do
  @moduledoc """
  Kafka protocol UpdateRaftVoter message

  Request versions summary:

  Response versions summary:

  """

  alias KlifeProtocol.Deserializer
  alias KlifeProtocol.Serializer
  alias KlifeProtocol.Header

  @api_key 82
  @min_flexible_version_req 0
  @min_flexible_version_res 0

  @doc """
  Receives a map and serialize it to kafka wire format of the given version.

  Input content fields:
  - cluster_id: The cluster id. (string | versions 0+)
  - current_leader_epoch: The current leader epoch of the partition, -1 for unknown leader epoch. (int32 | versions 0+)
  - voter_id: The replica id of the voter getting updated in the topic partition. (int32 | versions 0+)
  - voter_directory_id: The directory id of the voter getting updated in the topic partition. (uuid | versions 0+)
  - listeners: The endpoint that can be used to communicate with the leader. ([]Listener | versions 0+)
      - name: The name of the endpoint. (string | versions 0+)
      - host: The hostname. (string | versions 0+)
      - port: The port. (uint16 | versions 0+)
  - k_raft_version_feature: The range of versions of the protocol that the replica supports. (KRaftVersionFeature | versions 0+)
      - min_supported_version: The minimum supported KRaft protocol version. (int16 | versions 0+)
      - max_supported_version: The maximum supported KRaft protocol version. (int16 | versions 0+)

  """
  def serialize_request(%{headers: headers, content: content}, version) do
    headers
    |> Map.put(:request_api_key, @api_key)
    |> Map.put(:request_api_version, version)
    |> Header.serialize_request(req_header_version(version))
    |> then(&Serializer.execute(content, request_schema(version), &1))
  end

  @doc """
  Receive a binary in the kafka wire format and deserialize it into a map.

  Response content fields:

  - throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. (int32 | versions 0+)
  - error_code: The error code, or 0 if there was no error. (int16 | versions 0+)
  - current_leader: Details of the current Raft cluster leader. (CurrentLeader | versions 0+)
      - leader_id: The replica id of the current leader or -1 if the leader is unknown. (int32 | versions 0+)
      - leader_epoch: The latest known leader epoch. (int32 | versions 0+)
      - host: The node's hostname. (string | versions 0+)
      - port: The node's port. (int32 | versions 0+)

  """
  def deserialize_response(data, version, with_header? \\ true)

  def deserialize_response(data, version, true) do
    {:ok, {headers, rest_data}} = Header.deserialize_response(data, res_header_version(version))

    case Deserializer.execute(rest_data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{headers: headers, content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  def deserialize_response(data, version, false) do
    case Deserializer.execute(data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  @doc """
  Returns the message api key number.
  """
  def api_key(), do: @api_key

  @doc """
  Returns the current max supported version of this message.
  """
  def max_supported_version(), do: 0

  @doc """
  Returns the current min supported version of this message.
  """
  def min_supported_version(), do: 0

  defp req_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_req, do: 2, else: 1)

  defp res_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_res, do: 1, else: 0)

  def request_schema(0),
    do: [
      cluster_id: {:compact_string, %{is_nullable?: true}},
      current_leader_epoch: {:int32, %{is_nullable?: false}},
      voter_id: {:int32, %{is_nullable?: false}},
      voter_directory_id: {:uuid, %{is_nullable?: false}},
      listeners:
        {{:compact_array,
          [
            name: {:compact_string, %{is_nullable?: false}},
            host: {:compact_string, %{is_nullable?: false}},
            port: {:uint16, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, []}
          ]}, %{is_nullable?: false}},
      k_raft_version_feature:
        {{:object,
          [
            min_supported_version: {:int16, %{is_nullable?: false}},
            max_supported_version: {:int16, %{is_nullable?: false}},
            tag_buffer: {:tag_buffer, []}
          ]}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, []}
    ]

  def request_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message UpdateRaftVoter")

  def response_schema(0),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      error_code: {:int16, %{is_nullable?: false}},
      tag_buffer:
        {:tag_buffer,
         %{
           0 =>
             {{:current_leader,
               {:object,
                [
                  leader_id: {:int32, %{is_nullable?: false}},
                  leader_epoch: {:int32, %{is_nullable?: false}},
                  host: {:compact_string, %{is_nullable?: false}},
                  port: {:int32, %{is_nullable?: false}},
                  tag_buffer: {:tag_buffer, %{}}
                ]}}, %{is_nullable?: false}}
         }}
    ]

  def response_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message UpdateRaftVoter")
end
