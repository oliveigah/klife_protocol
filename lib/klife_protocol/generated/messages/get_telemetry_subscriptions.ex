# DO NOT EDIT THIS FILE MANUALLY
# This module is automatically generated by running mix task generate_file
# every change must be done inside the mix task directly

defmodule KlifeProtocol.Messages.GetTelemetrySubscriptions do
  @moduledoc """
  Kafka protocol GetTelemetrySubscriptions message

  Request versions summary:

  Response versions summary:

  """

  alias KlifeProtocol.Deserializer
  alias KlifeProtocol.Serializer
  alias KlifeProtocol.Header

  @api_key 71
  @min_flexible_version_req 0
  @min_flexible_version_res 0

  @doc """
  Receives a map and serialize it to kafka wire format of the given version.

  Input content fields:
  - client_instance_id: Unique id for this client instance, must be set to 0 on the first request. (uuid | versions 0+)

  """
  def serialize_request(%{headers: headers, content: content}, version) do
    headers
    |> Map.put(:request_api_key, @api_key)
    |> Map.put(:request_api_version, version)
    |> Header.serialize_request(req_header_version(version))
    |> then(&Serializer.execute(content, request_schema(version), &1))
  end

  @doc """
  Receive a binary in the kafka wire format and deserialize it into a map.

  Response content fields:

  - throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. (int32 | versions 0+)
  - error_code: The error code, or 0 if there was no error. (int16 | versions 0+)
  - client_instance_id: Assigned client instance id if ClientInstanceId was 0 in the request, else 0. (uuid | versions 0+)
  - subscription_id: Unique identifier for the current subscription set for this client instance. (int32 | versions 0+)
  - accepted_compression_types: Compression types that broker accepts for the PushTelemetryRequest. ([]int8 | versions 0+)
  - push_interval_ms: Configured push interval, which is the lowest configured interval in the current subscription set. (int32 | versions 0+)
  - telemetry_max_bytes: The maximum bytes of binary data the broker accepts in PushTelemetryRequest. (int32 | versions 0+)
  - delta_temporality: Flag to indicate monotonic/counter metrics are to be emitted as deltas or cumulative values (bool | versions 0+)
  - requested_metrics: Requested metrics prefix string match. Empty array: No metrics subscribed, Array[0] empty string: All metrics subscribed. ([]string | versions 0+)

  """
  def deserialize_response(data, version, with_header? \\ true)

  def deserialize_response(data, version, true) do
    {:ok, {headers, rest_data}} = Header.deserialize_response(data, res_header_version(version))

    case Deserializer.execute(rest_data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{headers: headers, content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  def deserialize_response(data, version, false) do
    case Deserializer.execute(data, response_schema(version)) do
      {:ok, {content, <<>>}} ->
        {:ok, %{content: content}}

      {:error, _reason} = err ->
        err
    end
  end

  @doc """
  Returns the message api key number.
  """
  def api_key(), do: @api_key

  @doc """
  Returns the current max supported version of this message.
  """
  def max_supported_version(), do: 0

  @doc """
  Returns the current min supported version of this message.
  """
  def min_supported_version(), do: 0

  defp req_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_req, do: 2, else: 1)

  defp res_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_res, do: 1, else: 0)

  defp request_schema(0),
    do: [client_instance_id: {:uuid, %{is_nullable?: false}}, tag_buffer: {:tag_buffer, []}]

  defp request_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message GetTelemetrySubscriptions")

  defp response_schema(0),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      error_code: {:int16, %{is_nullable?: false}},
      client_instance_id: {:uuid, %{is_nullable?: false}},
      subscription_id: {:int32, %{is_nullable?: false}},
      accepted_compression_types: {{:compact_array, :int8}, %{is_nullable?: false}},
      push_interval_ms: {:int32, %{is_nullable?: false}},
      telemetry_max_bytes: {:int32, %{is_nullable?: false}},
      delta_temporality: {:boolean, %{is_nullable?: false}},
      requested_metrics: {{:compact_array, :compact_string}, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, %{}}
    ]

  defp response_schema(unkown_version),
    do: raise("Unknown version #{unkown_version} for message GetTelemetrySubscriptions")
end